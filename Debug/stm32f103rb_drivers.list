
stm32f103rb_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000928  08000930  00010930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000928  08000928  00010930  2**0
                  CONTENTS
  4 .ARM          00000000  08000928  08000928  00010930  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000928  08000930  00010930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000928  08000928  00010928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000930  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000930  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010930  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000f83  00000000  00000000  00010959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00001227  00000000  00000000  000118dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000374  00000000  00000000  00012b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00012e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000083db  00000000  00000000  00012f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000b8  00000000  00000000  0001b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000065d  00000000  00000000  0001b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001ba35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000294  00000000  00000000  0001ba88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000910 	.word	0x08000910

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000910 	.word	0x08000910

08000170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000170:	480d      	ldr	r0, [pc, #52]	; (80001a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000172:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000174:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000178:	480c      	ldr	r0, [pc, #48]	; (80001ac <LoopForever+0x6>)
  ldr r1, =_edata
 800017a:	490d      	ldr	r1, [pc, #52]	; (80001b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800017c:	4a0d      	ldr	r2, [pc, #52]	; (80001b4 <LoopForever+0xe>)
  movs r3, #0
 800017e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000180:	e002      	b.n	8000188 <LoopCopyDataInit>

08000182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000186:	3304      	adds	r3, #4

08000188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800018a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800018c:	d3f9      	bcc.n	8000182 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800018e:	4a0a      	ldr	r2, [pc, #40]	; (80001b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000190:	4c0a      	ldr	r4, [pc, #40]	; (80001bc <LoopForever+0x16>)
  movs r3, #0
 8000192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000194:	e001      	b.n	800019a <LoopFillZerobss>

08000196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000198:	3204      	adds	r2, #4

0800019a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800019a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800019c:	d3fb      	bcc.n	8000196 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800019e:	f000 fb8b 	bl	80008b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001a2:	f000 f825 	bl	80001f0 <main>

080001a6 <LoopForever>:

LoopForever:
    b LoopForever
 80001a6:	e7fe      	b.n	80001a6 <LoopForever>
  ldr   r0, =_estack
 80001a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80001ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001b4:	08000930 	.word	0x08000930
  ldr r2, =_sbss
 80001b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001bc:	2000001c 	.word	0x2000001c

080001c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c0:	e7fe      	b.n	80001c0 <ADC1_2_IRQHandler>
	...

080001c4 <delay>:

#include "stm32f103rb.h"
#include "stm32f103rb_gpio_driver.h"

void delay(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
	for (uint32_t i=0; i<500000/2; i++);
 80001ca:	2300      	movs	r3, #0
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e002      	b.n	80001d6 <delay+0x12>
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	3301      	adds	r3, #1
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4a04      	ldr	r2, [pc, #16]	; (80001ec <delay+0x28>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d9f8      	bls.n	80001d0 <delay+0xc>
}
 80001de:	bf00      	nop
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	0003d08f 	.word	0x0003d08f

080001f0 <main>:

//void dupka();

int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08a      	sub	sp, #40	; 0x28
 80001f4:	af00      	add	r7, sp, #0
//	dupka(); //to jest test

	GPIO_Handle_t GpioLed;
	memset(&GpioLed,0,sizeof(GpioLed));// set each and every member element of this structure to 0
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	220c      	movs	r2, #12
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 fb7e 	bl	8000900 <memset>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOA;
 8000204:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <main+0x108>)
 8000206:	613b      	str	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_5;
 8000208:	2305      	movs	r3, #5
 800020a:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_OUT;
 800020c:	2301      	movs	r3, #1
 800020e:	757b      	strb	r3, [r7, #21]
	GpioLed.GPIO_PinConfig.GPIO_PinOutputType=GPIO_OUTPUT_TYPE_PP;
 8000210:	2300      	movs	r3, #0
 8000212:	763b      	strb	r3, [r7, #24]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000214:	2302      	movs	r3, #2
 8000216:	75bb      	strb	r3, [r7, #22]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]


	//PC13 button pulled up externally to VDD (+3.3V)

	GPIO_Handle_t GpioButton;
	GpioButton.pGPIOx = GPIOC;
 800021c:	4b37      	ldr	r3, [pc, #220]	; (80002fc <main+0x10c>)
 800021e:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_13;
 8000220:	230d      	movs	r3, #13
 8000222:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IT_FT;
 8000224:	2304      	movs	r3, #4
 8000226:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinOutputType=GPIO_OUTPUT_TYPE_PP; 	//N/A
 8000228:	2300      	movs	r3, #0
 800022a:	733b      	strb	r3, [r7, #12]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;			// N/A
 800022c:	2302      	movs	r3, #2
 800022e:	72bb      	strb	r3, [r7, #10]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000230:	2300      	movs	r3, #0
 8000232:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000234:	2101      	movs	r1, #1
 8000236:	4830      	ldr	r0, [pc, #192]	; (80002f8 <main+0x108>)
 8000238:	f000 f878 	bl	800032c <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 800023c:	2101      	movs	r1, #1
 800023e:	482f      	ldr	r0, [pc, #188]	; (80002fc <main+0x10c>)
 8000240:	f000 f874 	bl	800032c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f927 	bl	800049c <GPIO_Init>


	/*
	 * GPIO_Init + addition code for interrupt init
	 */
	int ret = GpioButton.GPIO_PinConfig.GPIO_PinNumber % 8;
 800024e:	7a3b      	ldrb	r3, [r7, #8]
 8000250:	f003 0307 	and.w	r3, r3, #7
 8000254:	623b      	str	r3, [r7, #32]
	uint8_t a = 0b1000;
 8000256:	2308      	movs	r3, #8
 8000258:	77fb      	strb	r3, [r7, #31]
	GPIOC->CR[1] &= ~((0b1111) << (4*ret));
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <main+0x10c>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	6a3a      	ldr	r2, [r7, #32]
 8000260:	0092      	lsls	r2, r2, #2
 8000262:	210f      	movs	r1, #15
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	43d2      	mvns	r2, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a23      	ldr	r2, [pc, #140]	; (80002fc <main+0x10c>)
 800026e:	400b      	ands	r3, r1
 8000270:	6053      	str	r3, [r2, #4]
	GPIOC->CR[1] |= (a << (4* ret));	//setting
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <main+0x10c>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	7ff9      	ldrb	r1, [r7, #31]
 8000278:	6a3a      	ldr	r2, [r7, #32]
 800027a:	0092      	lsls	r2, r2, #2
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	4611      	mov	r1, r2
 8000282:	4a1e      	ldr	r2, [pc, #120]	; (80002fc <main+0x10c>)
 8000284:	430b      	orrs	r3, r1
 8000286:	6053      	str	r3, [r2, #4]
	GPIO_Init(&GpioButton); // configure falling edge detection ; configure portcode ; set Interrupt Mask Register
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f906 	bl	800049c <GPIO_Init>

	//IRQ configurations
	GPIO_IRQPriorityConfig(IRQNumber_EXTI15_10, 15);
 8000290:	210f      	movs	r1, #15
 8000292:	2028      	movs	r0, #40	; 0x28
 8000294:	f000 fac6 	bl	8000824 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(40, ENABLE);
 8000298:	2101      	movs	r1, #1
 800029a:	2028      	movs	r0, #40	; 0x28
 800029c:	f000 fa3e 	bl	800071c <GPIO_IRQInterruptConfig>



	for(int i=0; i<10;i++){
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24
 80002a4:	e008      	b.n	80002b8 <main+0xc8>
	GPIO_ToggleOutputPin(GPIOA,5);
 80002a6:	2105      	movs	r1, #5
 80002a8:	4813      	ldr	r0, [pc, #76]	; (80002f8 <main+0x108>)
 80002aa:	f000 fa23 	bl	80006f4 <GPIO_ToggleOutputPin>
	delay();
 80002ae:	f7ff ff89 	bl	80001c4 <delay>
	for(int i=0; i<10;i++){
 80002b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b4:	3301      	adds	r3, #1
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24
 80002b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ba:	2b09      	cmp	r3, #9
 80002bc:	ddf3      	ble.n	80002a6 <main+0xb6>
	}
	GPIOC->CR[1] &= ~((0b1111) << (4*ret));
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <main+0x10c>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	6a3a      	ldr	r2, [r7, #32]
 80002c4:	0092      	lsls	r2, r2, #2
 80002c6:	210f      	movs	r1, #15
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	43d2      	mvns	r2, r2
 80002ce:	4611      	mov	r1, r2
 80002d0:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <main+0x10c>)
 80002d2:	400b      	ands	r3, r1
 80002d4:	6053      	str	r3, [r2, #4]
	GPIOC->CR[1] |= (a << (4*ret));
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0x10c>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	7ff9      	ldrb	r1, [r7, #31]
 80002dc:	6a3a      	ldr	r2, [r7, #32]
 80002de:	0092      	lsls	r2, r2, #2
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a05      	ldr	r2, [pc, #20]	; (80002fc <main+0x10c>)
 80002e8:	430b      	orrs	r3, r1
 80002ea:	6053      	str	r3, [r2, #4]
 80002ec:	2300      	movs	r3, #0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3728      	adds	r7, #40	; 0x28
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010800 	.word	0x40010800
 80002fc:	40011000 	.word	0x40011000

08000300 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void){ //this is the Interrupt Service Routine
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
	//handle the interrupt
	GPIO_IRQHandling(GPIO_PIN_NO_13); //clear the pending event from exti line
 8000306:	200d      	movs	r0, #13
 8000308:	f000 fab6 	bl	8000878 <GPIO_IRQHandling>

	for(int i=0	;	i<10	;	i++)
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	e004      	b.n	800031c <EXTI15_10_IRQHandler+0x1c>
		{
			delay();
 8000312:	f7ff ff57 	bl	80001c4 <delay>
	for(int i=0	;	i<10	;	i++)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b09      	cmp	r3, #9
 8000320:	ddf7      	ble.n	8000312 <EXTI15_10_IRQHandler+0x12>
		}

}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <GPIO_PeriClockControl>:
#include "stm32f103rb.h"/*MCU specific data*/
#include "stm32f103rb_gpio_driver.h"

//Peripheral Clock Setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d14c      	bne.n	80003d8 <GPIO_PeriClockControl+0xac>
	{
		if(pGPIOx==GPIOA)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a4e      	ldr	r2, [pc, #312]	; (800047c <GPIO_PeriClockControl+0x150>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000346:	4b4e      	ldr	r3, [pc, #312]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a4d      	ldr	r2, [pc, #308]	; (8000480 <GPIO_PeriClockControl+0x154>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6193      	str	r3, [r2, #24]
		}else if (pGPIOx==GPIOG)
		{
			GPIOG_PCLK_DI();
		}
	}
}
 8000352:	e08d      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOB)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a4b      	ldr	r2, [pc, #300]	; (8000484 <GPIO_PeriClockControl+0x158>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800035c:	4b48      	ldr	r3, [pc, #288]	; (8000480 <GPIO_PeriClockControl+0x154>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a47      	ldr	r2, [pc, #284]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6193      	str	r3, [r2, #24]
}
 8000368:	e082      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOC)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a46      	ldr	r2, [pc, #280]	; (8000488 <GPIO_PeriClockControl+0x15c>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000372:	4b43      	ldr	r3, [pc, #268]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a42      	ldr	r2, [pc, #264]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000378:	f043 0310 	orr.w	r3, r3, #16
 800037c:	6193      	str	r3, [r2, #24]
}
 800037e:	e077      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOD)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a42      	ldr	r2, [pc, #264]	; (800048c <GPIO_PeriClockControl+0x160>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000388:	4b3d      	ldr	r3, [pc, #244]	; (8000480 <GPIO_PeriClockControl+0x154>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a3c      	ldr	r2, [pc, #240]	; (8000480 <GPIO_PeriClockControl+0x154>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6193      	str	r3, [r2, #24]
}
 8000394:	e06c      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOE)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a3d      	ldr	r2, [pc, #244]	; (8000490 <GPIO_PeriClockControl+0x164>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800039e:	4b38      	ldr	r3, [pc, #224]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a37      	ldr	r2, [pc, #220]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a8:	6193      	str	r3, [r2, #24]
}
 80003aa:	e061      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOF)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a39      	ldr	r2, [pc, #228]	; (8000494 <GPIO_PeriClockControl+0x168>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003b4:	4b32      	ldr	r3, [pc, #200]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a31      	ldr	r2, [pc, #196]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003be:	6193      	str	r3, [r2, #24]
}
 80003c0:	e056      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOG)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a34      	ldr	r2, [pc, #208]	; (8000498 <GPIO_PeriClockControl+0x16c>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d152      	bne.n	8000470 <GPIO_PeriClockControl+0x144>
			GPIOG_PCLK_EN();
 80003ca:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a2c      	ldr	r2, [pc, #176]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d4:	6193      	str	r3, [r2, #24]
}
 80003d6:	e04b      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		if(pGPIOx==GPIOA)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a28      	ldr	r2, [pc, #160]	; (800047c <GPIO_PeriClockControl+0x150>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0xc2>
			GPIOA_PCLK_DI();
 80003e0:	4b27      	ldr	r3, [pc, #156]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a26      	ldr	r2, [pc, #152]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003e6:	f023 0304 	bic.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
}
 80003ec:	e040      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOB)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a24      	ldr	r2, [pc, #144]	; (8000484 <GPIO_PeriClockControl+0x158>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0xd8>
			GPIOB_PCLK_DI();
 80003f6:	4b22      	ldr	r3, [pc, #136]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a21      	ldr	r2, [pc, #132]	; (8000480 <GPIO_PeriClockControl+0x154>)
 80003fc:	f023 0308 	bic.w	r3, r3, #8
 8000400:	6193      	str	r3, [r2, #24]
}
 8000402:	e035      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOC)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a20      	ldr	r2, [pc, #128]	; (8000488 <GPIO_PeriClockControl+0x15c>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0xee>
			GPIOC_PCLK_DI();
 800040c:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <GPIO_PeriClockControl+0x154>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000412:	f023 0310 	bic.w	r3, r3, #16
 8000416:	6193      	str	r3, [r2, #24]
}
 8000418:	e02a      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOD)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a1b      	ldr	r2, [pc, #108]	; (800048c <GPIO_PeriClockControl+0x160>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x104>
			GPIOD_PCLK_DI();
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a16      	ldr	r2, [pc, #88]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000428:	f023 0320 	bic.w	r3, r3, #32
 800042c:	6193      	str	r3, [r2, #24]
}
 800042e:	e01f      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOE)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a17      	ldr	r2, [pc, #92]	; (8000490 <GPIO_PeriClockControl+0x164>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x11a>
			GPIOE_PCLK_DI();
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <GPIO_PeriClockControl+0x154>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <GPIO_PeriClockControl+0x154>)
 800043e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000442:	6193      	str	r3, [r2, #24]
}
 8000444:	e014      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOF)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a12      	ldr	r2, [pc, #72]	; (8000494 <GPIO_PeriClockControl+0x168>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0x130>
			GPIOF_PCLK_DI();
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000458:	6193      	str	r3, [r2, #24]
}
 800045a:	e009      	b.n	8000470 <GPIO_PeriClockControl+0x144>
		}else if (pGPIOx==GPIOG)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <GPIO_PeriClockControl+0x16c>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d105      	bne.n	8000470 <GPIO_PeriClockControl+0x144>
			GPIOG_PCLK_DI();
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <GPIO_PeriClockControl+0x154>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <GPIO_PeriClockControl+0x154>)
 800046a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800046e:	6193      	str	r3, [r2, #24]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40010800 	.word	0x40010800
 8000480:	40021000 	.word	0x40021000
 8000484:	40010c00 	.word	0x40010c00
 8000488:	40011000 	.word	0x40011000
 800048c:	40011400 	.word	0x40011400
 8000490:	40011800 	.word	0x40011800
 8000494:	40011c00 	.word	0x40011c00
 8000498:	40012000 	.word	0x40012000

0800049c <GPIO_Init>:



//Init and De-init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) // TO ReDO - improvement needed
{
 800049c:	b480      	push	{r7}
 800049e:	b089      	sub	sp, #36	; 0x24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	uint8_t temp, temp2 = 0;	//temp. register
 80004a4:	2300      	movs	r3, #0
 80004a6:	77fb      	strb	r3, [r7, #31]



	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d85e      	bhi.n	800056e <GPIO_Init+0xd2>
	{
		//non interrupt mode
		//we need to place the mode setting into appropriate Configuration Register bits

		uint8_t a = 0b1000; //input
 80004b0:	2308      	movs	r3, #8
 80004b2:	76fb      	strb	r3, [r7, #27]

		uint8_t b = 0b0000; //input analog mode
 80004b4:	2300      	movs	r3, #0
 80004b6:	76bb      	strb	r3, [r7, #26]

		uint8_t c = 0b0010; //push pull output mode low speed
 80004b8:	2302      	movs	r3, #2
 80004ba:	767b      	strb	r3, [r7, #25]
		uint8_t d = 0b0001; //push pull output mode medium speed
 80004bc:	2301      	movs	r3, #1
 80004be:	763b      	strb	r3, [r7, #24]
		uint8_t e = 0b0011; //push pull output mode high speed
 80004c0:	2303      	movs	r3, #3
 80004c2:	75fb      	strb	r3, [r7, #23]

		uint8_t f = 0b0110; //open drain output mode low speed
 80004c4:	2306      	movs	r3, #6
 80004c6:	75bb      	strb	r3, [r7, #22]
		uint8_t g = 0b0001; //open drain output mode medium speed
 80004c8:	2301      	movs	r3, #1
 80004ca:	757b      	strb	r3, [r7, #21]
		uint8_t h = 0b0011; //open drain output mode high speed
 80004cc:	2303      	movs	r3, #3
 80004ce:	753b      	strb	r3, [r7, #20]

		uint8_t i = 0b1010; //alternate function output push-pull low speed
 80004d0:	230a      	movs	r3, #10
 80004d2:	74fb      	strb	r3, [r7, #19]
		uint8_t j = 0b1001; //alternate function output push-pull medium speed
 80004d4:	2309      	movs	r3, #9
 80004d6:	74bb      	strb	r3, [r7, #18]
		uint8_t k = 0b1011; //alternate function output push-pull medium speed
 80004d8:	230b      	movs	r3, #11
 80004da:	747b      	strb	r3, [r7, #17]

		uint8_t l = 0b1110; //alternate function output open drain low speed
 80004dc:	230e      	movs	r3, #14
 80004de:	743b      	strb	r3, [r7, #16]
		uint8_t m = 0b1101; //alternate function output open drain medium speed
 80004e0:	230d      	movs	r3, #13
 80004e2:	73fb      	strb	r3, [r7, #15]
		uint8_t n = 0b1111; //alternate function output open drain medium speed
 80004e4:	230f      	movs	r3, #15
 80004e6:	73bb      	strb	r3, [r7, #14]




		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <=7) // Port Configuration Register Low CR[0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	2b07      	cmp	r3, #7
 80004ee:	d81d      	bhi.n	800052c <GPIO_Init+0x90>
		{
			pGPIOHandle->pGPIOx->CR[0] &= ~(0b1111 << (4* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));	//clearing
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	210f      	movs	r1, #15
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	43db      	mvns	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	400a      	ands	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CR[0] |= (e << (4* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));	//setting
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	7df9      	ldrb	r1, [r7, #23]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
		// 3. Enable the exti interrupt delivery using IMR

		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	}

}
 800052a:	e0c9      	b.n	80006c0 <GPIO_Init+0x224>
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	f003 0307 	and.w	r3, r3, #7
 8000534:	77fb      	strb	r3, [r7, #31]
			pGPIOHandle->pGPIOx->CR[1] &= ~(0b1111 << (4* temp2));	//clearing
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	7ffb      	ldrb	r3, [r7, #31]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	210f      	movs	r1, #15
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	4619      	mov	r1, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	400a      	ands	r2, r1
 8000550:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CR[1] |= (a << (4* temp2));	//setting
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	7ef9      	ldrb	r1, [r7, #27]
 800055a:	7ffb      	ldrb	r3, [r7, #31]
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	fa01 f303 	lsl.w	r3, r1, r3
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	430a      	orrs	r2, r1
 800056a:	605a      	str	r2, [r3, #4]
}
 800056c:	e0a8      	b.n	80006c0 <GPIO_Init+0x224>
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	2b04      	cmp	r3, #4
 8000574:	d117      	bne.n	80005a6 <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	4b55      	ldr	r3, [pc, #340]	; (80006cc <GPIO_Init+0x230>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a51      	ldr	r2, [pc, #324]	; (80006cc <GPIO_Init+0x230>)
 8000588:	430b      	orrs	r3, r1
 800058a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b4f      	ldr	r3, [pc, #316]	; (80006cc <GPIO_Init+0x230>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	43d2      	mvns	r2, r2
 800059c:	4611      	mov	r1, r2
 800059e:	4a4b      	ldr	r2, [pc, #300]	; (80006cc <GPIO_Init+0x230>)
 80005a0:	400b      	ands	r3, r1
 80005a2:	6093      	str	r3, [r2, #8]
 80005a4:	e035      	b.n	8000612 <GPIO_Init+0x176>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2b05      	cmp	r3, #5
 80005ac:	d117      	bne.n	80005de <GPIO_Init+0x142>
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ae:	4b47      	ldr	r3, [pc, #284]	; (80006cc <GPIO_Init+0x230>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7912      	ldrb	r2, [r2, #4]
 80005b6:	4611      	mov	r1, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	408a      	lsls	r2, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	4a43      	ldr	r2, [pc, #268]	; (80006cc <GPIO_Init+0x230>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c4:	4b41      	ldr	r3, [pc, #260]	; (80006cc <GPIO_Init+0x230>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	408a      	lsls	r2, r1
 80005d2:	43d2      	mvns	r2, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a3d      	ldr	r2, [pc, #244]	; (80006cc <GPIO_Init+0x230>)
 80005d8:	400b      	ands	r3, r1
 80005da:	60d3      	str	r3, [r2, #12]
 80005dc:	e019      	b.n	8000612 <GPIO_Init+0x176>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	2b06      	cmp	r3, #6
 80005e4:	d115      	bne.n	8000612 <GPIO_Init+0x176>
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <GPIO_Init+0x230>)
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a35      	ldr	r2, [pc, #212]	; (80006cc <GPIO_Init+0x230>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fc:	4b33      	ldr	r3, [pc, #204]	; (80006cc <GPIO_Init+0x230>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	4611      	mov	r1, r2
 800060c:	4a2f      	ldr	r2, [pc, #188]	; (80006cc <GPIO_Init+0x230>)
 800060e:	430b      	orrs	r3, r1
 8000610:	60d3      	str	r3, [r2, #12]
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	77bb      	strb	r3, [r7, #30]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	777b      	strb	r3, [r7, #29]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <GPIO_Init+0x234>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d02b      	beq.n	8000686 <GPIO_Init+0x1ea>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <GPIO_Init+0x238>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d024      	beq.n	8000682 <GPIO_Init+0x1e6>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <GPIO_Init+0x23c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d01d      	beq.n	800067e <GPIO_Init+0x1e2>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a25      	ldr	r2, [pc, #148]	; (80006dc <GPIO_Init+0x240>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d016      	beq.n	800067a <GPIO_Init+0x1de>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <GPIO_Init+0x244>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d00f      	beq.n	8000676 <GPIO_Init+0x1da>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <GPIO_Init+0x248>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d008      	beq.n	8000672 <GPIO_Init+0x1d6>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <GPIO_Init+0x24c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d101      	bne.n	800066e <GPIO_Init+0x1d2>
 800066a:	2306      	movs	r3, #6
 800066c:	e00c      	b.n	8000688 <GPIO_Init+0x1ec>
 800066e:	2300      	movs	r3, #0
 8000670:	e00a      	b.n	8000688 <GPIO_Init+0x1ec>
 8000672:	2305      	movs	r3, #5
 8000674:	e008      	b.n	8000688 <GPIO_Init+0x1ec>
 8000676:	2304      	movs	r3, #4
 8000678:	e006      	b.n	8000688 <GPIO_Init+0x1ec>
 800067a:	2303      	movs	r3, #3
 800067c:	e004      	b.n	8000688 <GPIO_Init+0x1ec>
 800067e:	2302      	movs	r3, #2
 8000680:	e002      	b.n	8000688 <GPIO_Init+0x1ec>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <GPIO_Init+0x1ec>
 8000686:	2300      	movs	r3, #0
 8000688:	773b      	strb	r3, [r7, #28]
		AFIO_PCLK_EN();
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <GPIO_Init+0x250>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <GPIO_Init+0x250>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6193      	str	r3, [r2, #24]
		AFIO->EXTICR[temp1] = portcode << temp2*4;
 8000696:	7f3a      	ldrb	r2, [r7, #28]
 8000698:	7f7b      	ldrb	r3, [r7, #29]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	fa02 f103 	lsl.w	r1, r2, r3
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <GPIO_Init+0x254>)
 80006a2:	7fbb      	ldrb	r3, [r7, #30]
 80006a4:	3302      	adds	r3, #2
 80006a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <GPIO_Init+0x230>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	7912      	ldrb	r2, [r2, #4]
 80006b2:	4611      	mov	r1, r2
 80006b4:	2201      	movs	r2, #1
 80006b6:	408a      	lsls	r2, r1
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <GPIO_Init+0x230>)
 80006bc:	430b      	orrs	r3, r1
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	3724      	adds	r7, #36	; 0x24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40010400 	.word	0x40010400
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40011400 	.word	0x40011400
 80006e0:	40011800 	.word	0x40011800
 80006e4:	40011c00 	.word	0x40011c00
 80006e8:	40012000 	.word	0x40012000
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010000 	.word	0x40010000

080006f4 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR	^= (1<< PinNumber);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	78fa      	ldrb	r2, [r7, #3]
 8000706:	2101      	movs	r1, #1
 8000708:	fa01 f202 	lsl.w	r2, r1, r2
 800070c:	405a      	eors	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60da      	str	r2, [r3, #12]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <GPIO_IRQInterruptConfig>:

//IRQ Configuration and ISR handling
void GPIO_IRQInterruptConfig (uint8_t IRQNumber, uint8_t EnorDi){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d133      	bne.n	800079a <GPIO_IRQInterruptConfig+0x7e>
	{

		if (IRQNumber <= 31)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b1f      	cmp	r3, #31
 8000736:	d80a      	bhi.n	800074e <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1<< IRQNumber);
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <GPIO_IRQInterruptConfig+0xf0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	4611      	mov	r1, r2
 8000746:	4a31      	ldr	r2, [pc, #196]	; (800080c <GPIO_IRQInterruptConfig+0xf0>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register //64 to 95
			*NVIC_ICER2 |= (1<< (IRQNumber % 64));
		}
	}
}
 800074c:	e059      	b.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber <= 63)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b1f      	cmp	r3, #31
 8000752:	d90f      	bls.n	8000774 <GPIO_IRQInterruptConfig+0x58>
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b3f      	cmp	r3, #63	; 0x3f
 8000758:	d80c      	bhi.n	8000774 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1<< (IRQNumber % 32));
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <GPIO_IRQInterruptConfig+0xf4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	f002 021f 	and.w	r2, r2, #31
 8000764:	2101      	movs	r1, #1
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	4611      	mov	r1, r2
 800076c:	4a28      	ldr	r2, [pc, #160]	; (8000810 <GPIO_IRQInterruptConfig+0xf4>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	e046      	b.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber > 63 && IRQNumber <=95)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b3f      	cmp	r3, #63	; 0x3f
 8000778:	d943      	bls.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b5f      	cmp	r3, #95	; 0x5f
 800077e:	d840      	bhi.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1<< (IRQNumber % 64));
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <GPIO_IRQInterruptConfig+0xf8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800078a:	2101      	movs	r1, #1
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	4611      	mov	r1, r2
 8000792:	4a20      	ldr	r2, [pc, #128]	; (8000814 <GPIO_IRQInterruptConfig+0xf8>)
 8000794:	430b      	orrs	r3, r1
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	e033      	b.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b1f      	cmp	r3, #31
 800079e:	d80a      	bhi.n	80007b6 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1<< IRQNumber);
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <GPIO_IRQInterruptConfig+0xfc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	79fa      	ldrb	r2, [r7, #7]
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <GPIO_IRQInterruptConfig+0xfc>)
 80007b0:	430b      	orrs	r3, r1
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	e025      	b.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber <= 63)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b1f      	cmp	r3, #31
 80007ba:	d90f      	bls.n	80007dc <GPIO_IRQInterruptConfig+0xc0>
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b3f      	cmp	r3, #63	; 0x3f
 80007c0:	d80c      	bhi.n	80007dc <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1<< (IRQNumber % 32));
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <GPIO_IRQInterruptConfig+0x100>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	79fa      	ldrb	r2, [r7, #7]
 80007c8:	f002 021f 	and.w	r2, r2, #31
 80007cc:	2101      	movs	r1, #1
 80007ce:	fa01 f202 	lsl.w	r2, r1, r2
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <GPIO_IRQInterruptConfig+0x100>)
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	e012      	b.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber > 63 && IRQNumber <=95)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b3f      	cmp	r3, #63	; 0x3f
 80007e0:	d90f      	bls.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b5f      	cmp	r3, #95	; 0x5f
 80007e6:	d80c      	bhi.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1<< (IRQNumber % 64));
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <GPIO_IRQInterruptConfig+0x104>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	79fa      	ldrb	r2, [r7, #7]
 80007ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a09      	ldr	r2, [pc, #36]	; (8000820 <GPIO_IRQInterruptConfig+0x104>)
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	e7ff      	b.n	8000802 <GPIO_IRQInterruptConfig+0xe6>
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000e104 	.word	0xe000e104
 8000814:	e000e108 	.word	0xe000e108
 8000818:	e000e180 	.word	0xe000e180
 800081c:	e000e184 	.word	0xe000e184
 8000820:	e000e188 	.word	0xe000e188

08000824 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig (uint8_t IRQNumber , uint32_t IRQPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	089b      	lsrs	r3, r3, #2
 8000834:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = 8*iprx_section + (8 - NO_PRIORITY_BITS_USED);
 800083e:	7bbb      	ldrb	r3, [r7, #14]
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	3304      	adds	r3, #4
 8000846:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000850:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000854:	6819      	ldr	r1, [r3, #0]
 8000856:	7b7b      	ldrb	r3, [r7, #13]
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	409a      	lsls	r2, r3
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000864:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000868:	430a      	orrs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
	...

08000878 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	//clear the exti pending register corresponding to the pin number
	if(EXTI->PR & (1<<PinNumber)) // if pending register bit corresponding to this pin number is set (...)
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <GPIO_IRQHandling+0x3c>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	2101      	movs	r1, #1
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	4013      	ands	r3, r2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d009      	beq.n	80008a8 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= (1<<PinNumber);
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <GPIO_IRQHandling+0x3c>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	4611      	mov	r1, r2
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <GPIO_IRQHandling+0x3c>)
 80008a4:	430b      	orrs	r3, r1
 80008a6:	6153      	str	r3, [r2, #20]
	}
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40010400 	.word	0x40010400

080008b8 <__libc_init_array>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	2600      	movs	r6, #0
 80008bc:	4d0c      	ldr	r5, [pc, #48]	; (80008f0 <__libc_init_array+0x38>)
 80008be:	4c0d      	ldr	r4, [pc, #52]	; (80008f4 <__libc_init_array+0x3c>)
 80008c0:	1b64      	subs	r4, r4, r5
 80008c2:	10a4      	asrs	r4, r4, #2
 80008c4:	42a6      	cmp	r6, r4
 80008c6:	d109      	bne.n	80008dc <__libc_init_array+0x24>
 80008c8:	f000 f822 	bl	8000910 <_init>
 80008cc:	2600      	movs	r6, #0
 80008ce:	4d0a      	ldr	r5, [pc, #40]	; (80008f8 <__libc_init_array+0x40>)
 80008d0:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <__libc_init_array+0x44>)
 80008d2:	1b64      	subs	r4, r4, r5
 80008d4:	10a4      	asrs	r4, r4, #2
 80008d6:	42a6      	cmp	r6, r4
 80008d8:	d105      	bne.n	80008e6 <__libc_init_array+0x2e>
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e0:	4798      	blx	r3
 80008e2:	3601      	adds	r6, #1
 80008e4:	e7ee      	b.n	80008c4 <__libc_init_array+0xc>
 80008e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ea:	4798      	blx	r3
 80008ec:	3601      	adds	r6, #1
 80008ee:	e7f2      	b.n	80008d6 <__libc_init_array+0x1e>
 80008f0:	08000928 	.word	0x08000928
 80008f4:	08000928 	.word	0x08000928
 80008f8:	08000928 	.word	0x08000928
 80008fc:	0800092c 	.word	0x0800092c

08000900 <memset>:
 8000900:	4603      	mov	r3, r0
 8000902:	4402      	add	r2, r0
 8000904:	4293      	cmp	r3, r2
 8000906:	d100      	bne.n	800090a <memset+0xa>
 8000908:	4770      	bx	lr
 800090a:	f803 1b01 	strb.w	r1, [r3], #1
 800090e:	e7f9      	b.n	8000904 <memset+0x4>

08000910 <_init>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr

0800091c <_fini>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	bf00      	nop
 8000920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000922:	bc08      	pop	{r3}
 8000924:	469e      	mov	lr, r3
 8000926:	4770      	bx	lr
